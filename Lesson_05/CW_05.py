# Модуль shutil — набор функцій високого рівня для роботи з елементами
# файлової системи. Часто використовується разом з os.

import sys
import pathlib
import os.path
import os

print("OK", file=sys.stdout)
print("Error", file=sys.stderr) # Текст виводиться червоним кольором

### Модуль os — надає функції для роботи з операційною системою.
print("="*100)
#############################################################################
print(os.name) #ім’я операційної системи ('posix', 'nt', 'mac', 'os2', 'ce', 'java')
print("="*100)
#############################################################################
print(os.environ)  #словник змінних оточення
print("="*100)
#############################################################################
print(os.listdir()) #список файлів у директорії
print("="*100)
#############################################################################
print(os.getcwd()) #поточна директорія
print("="*100)
#############################################################################
#print(os.system(command))  #виконує системну команду Яка вказана в параметрі
#############################################################################
print("="*100)

#### Модуль os.path — вбудований підмодуль модуля os, призначений для роботи зі шляхами файлів.
###############################################################################################
print(os.path.abspath("c:\\Windows\\System32"))    #вертає нормалізований повний шлях у вигляді -  c:\Windows\System32
print(os.path.basename("C:\\Python\\Sturtup_Academy\\Lesson_05\\test.txt")) #базове ім’я шляху - test.txt
print(os.path.exists("C:\\Python\\Sturtup_Academy\\Lesson_05\\test.txt")) # вертає True, якщо об’єкт існує - True
print(os.path.getsize("C:\\Python\\Sturtup_Academy\\Lesson_05\\test.txt")) # розмір файлу у байтах - 35
print(os.path.isfile("C:\\Python\\Sturtup_Academy\\Lesson_05\\test.txt")) # чи є шлях файлом - True
print(os.path.isdir("C:\\Python\\Sturtup_Academy\\Lesson_05\\test.txt")) # чи є шлях папкою - False

print("="*100)
print("="*100)
###############################################
# Файли
# ● Для роботи з вмістом файлів використовується функція open():
# open(file, mode='r', …)
# ● За замовчуванням файл відкривається у режимі читання
################################################
f = open("test.txt", "r")
print(type(f))
print(f.read())
f.close()
# Режими відкриття файлів
# 'r' читання (режим за замовчуванням)
# 'w' запис (видаляє існуючий вміст)
# 'x' створення (помилка, якщо файл вже існує)
# 'a' запис у кінець
# 'b' бінарний режим (без перекодування)
# 't' текстовий режим (режим за замовчуванням)
# '+' update (читання та запис)
d = open("test1.txt", "w", encoding="utf8")
s = "Новий зміст"
print(d.write(s))
f.close()
###############################################################################
e = open("test.txt", "a", encoding="utf8")
s = "Новий зміст 1"
print(e.write("\n" + s)) # для запису в новий рядок
f.close()
################################################################################
# Контекстний менеджер
# ● Відкриті файли завжди треба закривати після завершення роботи з ними
# ● Для цього використовується контекстний менеджер with, аналог try
# except finally
# with open(‘file.txt’) as f:
# print(f.read())
# ● Файл, що був відкритий за допомогою with, у кінці роботи закривається
###############################################################################
with open("test.txt", "a", encoding="utf8") as f:
    print(f.write("\n" + s))
###############################################################################


